#ifndef GLWIDGET_HPP
#define GLWIDGET_HPP

#include "framework_global.h"

#include "OpenGL.hpp"
#include <@QGL_CLASS@>

#include <QPoint>

#include <Eigen/Dense>

#include "GLCamera.hpp"
#include "GLObject.hpp"
#include "Mesh.hpp"
#include "Shader.hpp"

class Mesh;

/*
 On Fedora 29 (CMake 3.14.5/Qt 5.11.3/gcc 8.3.1) and Fedora 30 
the following code does not compile 

#if (QT_VERSION < QT_VERSION_CHECK(5, 4, 0))
class FRAMEWORK_EXPORT GLWidget : public QGLWidget
#else
class FRAMEWORK_EXPORT GLWidget : public QOpenGLWidget
#endif
{

The moc file moc_GLWidget.cpp is generated with references to QGLWidget and not QOpenGLWidget.
(And thus I get "QGLWidget::qt_metacall(..." has not been declared kinds of errors)
I tried lots of things : change statements order, change version check, passing the QT_VERSION to moc... but I am not able to make it work.
What's strange is that it compiles correctly on Ubuntu 19.04 (CMake 3.13.4/ ) ...

A workaround find here: 
https://stackoverflow.com/questions/35969392/dynamically-use-qglwidget-or-qopenglwidget-depending-on-qt-version
is to have CMake generate the correct GLWidget.hpp file from a GLWidget.hpp.in file.


*/

class GLWidget : public @QGL_CLASS@
{
  Q_OBJECT

public:
  explicit GLWidget(QWidget *parent = nullptr);

  ~GLWidget();

  bool loadMesh(const QString &meshFilename);

  void computeTextureCoords();

  void setTexture(const QImage &image);

  bool saveMesh(const QString &outputMeshFilename);

  void setLightPos(float x, float y, float z);
  void setAmbientDiffuseSpecular(Eigen::Vector3f a,
                                 Eigen::Vector3f d,
                                 Eigen::Vector3f s);
  void setSpecularExponent(float se);
  void setUseTexture(bool onoff);
  void setTextureMatrix(const Eigen::Matrix3f &texMat);
  void applyTextureMatrix();
  void applyViewMatrix();
  void resetViewMatrix();

  void setUseBackgroundTexture(bool onoff);
  void setBackgroundTexture(const QImage &image);
  void setBackgroundTextureMatrix(const Eigen::Matrix3f &texMat);

  QImage takeScreenshot();
  QImage takeScreenshotHiRes();

  bool takeRandomScreenshots(const QString &prefix,
                             const QString &ext,
                             size_t numScreenshots,
                             float minPhy,
                             float maxPhy,
                             float minTheta,
                             float maxTheta);

signals:
  void hasTexCoords(bool onoff);
  void hasImage(bool onoff);

protected:
  virtual void initializeGL() override;

  virtual void resizeGL(int w, int h) override;

  virtual void paintGL() override;

  virtual void keyPressEvent(QKeyEvent *event) override;
  virtual void mousePressEvent(QMouseEvent *e) override;
  virtual void mouseReleaseEvent(QMouseEvent *e) override;
  virtual void mouseMoveEvent(QMouseEvent *e) override;
  virtual void wheelEvent(QWheelEvent *e) override;

  void printGLInfos();

  void initGLForMesh();

  void updateCameraLookAt();

  void getRayInWorld(QPoint pos,
                     Eigen::Vector3f &rayOrigin,
                     Eigen::Vector3f &rayDirection);

  void updateMeshGL();

  void setHiResSize(int &prevW, int &prevH);
  void resetLowResSize(int prevW, int prevH);

  void updateBackgroundTransformation();

private:
  enum class Mode { MOVE_CAMERA = 0, SELECTION_VERTEX };

  /*


    QImage initialize(int pageId, int page_L_R, QImage srcInput);
    //void initializeDatabaseKHOI(int pageId, int page_L_R, QImage srcInput);
    //void initializeDatabaseWeb(int pageId, int page_L_R, int  imgId, QImage srcInput);
    void save(const char* filename, int w, int h);
    void keyboard(unsigned char key, int x, int y);
    void reshape (int w, int h);
    void display(void);
    void drawmodel(void);
    void init(void);
    GLuint genTexture(const QImage &img);
    void changePerspective();
    int _pageId, _page_L_R;
    QImage _srcInput;
  */

  Mode m_mode;

  QPoint m_lastMousePos;

  GLCamera m_camera;
  float m_camPhy;
  float m_camTheta;
  float m_camDist;
  Eigen::Vector3f m_camLookAt;
  float m_camFov;

  Eigen::Vector4f m_lightPos;
  Eigen::Vector3f m_ambient;
  Eigen::Vector3f m_diffuse;
  Eigen::Vector3f m_specular;
  float m_specularExponent;
  bool m_useTexture;
  Eigen::Matrix3f m_texMat;

  GLObject *m_object;
  GLMesh *m_meshGL;
  Shader m_program;

  GLuint m_textureId;
  GLuint m_samplerId;
  GLenum m_minFilter;
  GLenum m_magFilter;

  int m_tex_width;
  int m_tex_height;
  Mesh m_mesh;
  Mesh m_sphere;
  GLObject *m_sphereObject;
  GLMesh *m_sphereMeshGL;
  Shader m_sphereProgram;
  Eigen::Vector4f m_sphereColor;

  bool m_useBackground;
  bool m_useBackgroundTexture;
  Mesh m_backgroundMesh;
  GLObject *m_backgroundObject;
  GLMesh *m_backgroundMeshGL;
  Shader m_backgroundProgram;
  GLuint m_backgroundTextureId;
  GLuint m_backgroundSamplerId;
  GLenum m_backgroundMinFilter;
  GLenum m_backgroundMagFilter;
  Eigen::Matrix3f m_backgroundTexMat;

  std::vector<uint32_t> m_selectedVertices;
};

#endif /* ! GLWIDGET_HPP */
